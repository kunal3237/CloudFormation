#########################Here I'll present the test case of cfn-init,cfn-signal and CreationPolicy

In one of the previos test case I have shown the use case of creation policy which basicaly wait for signal with in the provided time limit. 
In that example I was sending the signal manually. Now Here I would be using the cfn-signal, whi will send the signal to Creationpolicy.
Please note that CreationPolicy is an attribute of the EC2 Resource. So cfn-signal
should be sent to instance i.e MyInstance in this case.

#######################################################################################################

AWSTemplateFormatVersion: 2010-09-09
Description: To check CreationPolicy working with CreationPolicy

Resources: 
  MyInstance: 
    Type: AWS::EC2::Instance
    Metadata: 
      AWS::CloudFormation::Init:                                                                 #####This will be checked by the cfn-init
        config: 
          commands: 
            test: 
              command: "echo \"$CFNTEST\" > test.txt"
              env: 
                CFNTEST: "I come from config1."
              cwd: "~"

    Properties:
      SecurityGroups:
        - !Ref mysg
      ImageId: ami-05fa46471b02db0ce
      InstanceType: t2.micro
      AvailabilityZone: ap-south-1b
    
      IamInstanceProfile: !Ref MyInstanceProfile
      UserData: 
        Fn::Base64: 
          !Sub |
            #!/bin/bash
            yum update -y
            yum install -y aws-cfn-bootstrap
            /opt/aws/bin/cfn-init -v \
              --stack ${AWS::StackId} \
              --resource MyInstance --region ${AWS::Region}                                                  #####Cfn-init to install the required commands/packages mentioned in the metadata 
            /opt/aws/bin/cfn-signal -e $?   --stack ${AWS::StackId} \                                        #####Sending CFN-signal, CreationPoicy is waiting for this signal, Only count 1 can be passed in case of EC2, More value is not valid
              --resource MyInstance --region ${AWS::Region}                                                  ####Here CreationPolicy is an attribute of the MyInstance, so signal should sent to MyInstance. ie --resource MyInstance
            sleep 10
            /opt/aws/bin/cfn-signal -e $?   --stack ${AWS::StackId} \
              --resource MyInstance --region ${AWS::Region}  
            sleep 10
            /opt/aws/bin/cfn-signal -e $?   --stack ${AWS::StackId} \
              --resource MyInstance --region ${AWS::Region}    
    CreationPolicy:                                                                                            ###Defining CreationPolicy
      ResourceSignal:    
        Count: 1                                                                                              ###Only 1 can be passed for EC2
        Timeout: PT3M           
  mysg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: inboud rules for myinstance
      GroupName: mysg2

      SecurityGroupIngress: 
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          ToPort: 22
          IpProtocol: tcp          


  
  MyIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: MyEC2Role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CloudFormationAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:SignalResource
                  - cloudformation:DescribeStackResource
                Resource: "*"
  
  MyInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: MyEC2InstanceProfile
      Roles:
        - !Ref MyIAMRole
       
        


Outputs:
  myinstance:
    Value: !GetAtt MyInstance.PublicDnsName
  mystack:
    Value: !Ref AWS::StackName  

#################################################################
kunal@kunal-Lenovo-U410:~/cloudFormation/chapter1$ aws cloudformation create-stack --stack-name myfirststack1 --template-body file://user4.yaml --region ap-south-1  --profile sharma --capabilities CAPABILITY_NAMED_IAM
{
    "StackId": "arn:aws:cloudformation:ap-south-1:************:stack/myfirststack1/780146f0-e0a5-11ef-a139-0622f1811261"
}
kunal@kunal-Lenovo-U410:~/cloudFormation/chapter1$ aws cloudformation list-stacks --stack-status-filter CREATE_IN_PROGRESS --region ap-south-1 --profile sharma
{
    "StackSummaries": [
        {
            "StackId": "arn:aws:cloudformation:ap-south-1:************:stack/myfirststack1/780146f0-e0a5-11ef-a139-0622f1811261",
            "StackName": "myfirststack1",
            "TemplateDescription": "To check CreationPolicy working with CreationPolicy",
            "CreationTime": "2025-02-01T14:04:35.964000+00:00",
            "StackStatus": "CREATE_IN_PROGRESS",
            "DriftInformation": {
                "StackDriftStatus": "NOT_CHECKED"
            }
        }
    ]
}
kunal@kunal-Lenovo-U410:~/cloudFormation/chapter1$ 

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$Event in CloudFormation $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
2025-02-01 19:36:02 UTC+0530 MyInstance CREATE_IN_PROGRESS Received SUCCESS signal with UniqueId i-0**********8
################################################################################################################
                                          WaitCondition
The AWS::CloudFormation::WaitCondition resource provides a way to coordinate stack resource creation with configuration actions that are external to the stack creation or to track the status of a configuration process.
It is same like CreationPolicy. CreationPolicy is an attribute where WaitCondition is a resource
Waitcondition and WaitHanlde are resources. WaitHandle is expecting thta it should get the signal

###################################################################################

AWSTemplateFormatVersion: 2010-09-09
Description: To check CreationPolicy working with CreationPolicy

Resources: 
  MyInstance: 
    Type: AWS::EC2::Instance
    Metadata: 
      AWS::CloudFormation::Init: 
        config: 
          files:                                                                                                  ####Use of File in the Metdata init
            /tmp/a:
              content: {
                        "Status" : "SUCCESS",
                        "Reason" : "Configuration Complete",
                        "UniqueId" : "ID1234",
                        "Data" : "Application has completed configuration."
                        }
    
          commands: 
            test: 
              command: "echo \"$CFNTEST\" > test.txt"
              env: 
                CFNTEST: "I come from config1."
              cwd: "~"

    Properties:
      SecurityGroups:
        - !Ref mysg
      ImageId: ami-05fa46471b02db0ce
      InstanceType: t2.micro
      AvailabilityZone: ap-south-1b
    
      IamInstanceProfile: !Ref MyInstanceProfile
      UserData: 
        Fn::Base64: 
          !Sub |
            #!/bin/bash
            yum update -y
            yum install -y aws-cfn-bootstrap
            /opt/aws/bin/cfn-init -v \
              --stack ${AWS::StackId} \
              --resource MyInstance --region ${AWS::Region}
            curl -X PUT \                                                            ####As we are using Waitcondition here. Waitcondition and Waithandle are reseources. Here WaitHandle is expecting to recieve the signal. This command will send the signal to waithandle
              -H 'Content-Type:' --data-binary '{"Status" : "SUCCESS","Reason" : "Configuration Complete","UniqueId" : "ID1234","Data" : "Application has completed configuration."}' \
              "${WaitHandle}"                                                        ####Every waithandle has Presigned URL and the signal must be sent to the presigned URL generated by the wait condition handle.
                                                                                     ###You use that presigned URL to signal success or failure. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-waitcondition.html
  mysg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: inboud rules for myinstance
      GroupName: mysg2

      SecurityGroupIngress: 
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          ToPort: 22
          IpProtocol: tcp          


  
  MyIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: MyEC2Role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CloudFormationAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:SignalResource
                  - cloudformation:DescribeStackResource
                Resource: "*"
  
  MyInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: MyEC2InstanceProfile
      Roles:
        - !Ref MyIAMRole

  WaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle

  waitcondition:      
    Type: AWS::CloudFormation::WaitCondition
    Properties:
      Count: 1
      Handle: !Ref WaitHandle
      Timeout: '600'

Outputs:
  myinstance:
    Value: !GetAtt MyInstance.PublicDnsName
  mystack:
    Value: !Ref AWS::StackName  
###############################################################################
kunal@kunal-Lenovo-U410:~/cloudFormation/chapter1$ aws cloudformation create-stack --stack-name myfirststack1 --template-body file://user4.yaml --region ap-south-1  --profile sharma --capabilities CAPABILITY_NAMED_IAM
{
    "StackId": "arn:aws:cloudformation:ap-south-1:**************:stack/myfirststack1/880d2970-e0ae-11ef-8a4b-06dddfe15eaf"
}
kunal@kunal-Lenovo-U410:~/cloudFormation/chapter1$ aws cloudformation list-stacks --stack-status-filter CREATE_COMPLETE --region ap-south-1 --profile sharma
{
    "StackSummaries": [
        {
            "StackId": "arn:aws:cloudformation:ap-south-1:**************:stack/myfirststack1/880d2970-e0ae-11ef-8a4b-06dddfe15eaf",
            "StackName": "myfirststack1",
            "TemplateDescription": "To check CreationPolicy working with CreationPolicy",
            "CreationTime": "2025-02-01T15:09:28.377000+00:00",
            "StackStatus": "CREATE_COMPLETE",
            "DriftInformation": {
                "StackDriftStatus": "NOT_CHECKED"
            }
        }
    ]
}
kunal@kunal-Lenovo-U410:~/cloudFormation/chapter1$ 

################################################################

Details about resources Created By the Stack:

kunal@kunal-Lenovo-U410:~/cloudFormation/chapter1$ aws cloudformation describe-stack-resources --stack-name myfirststack1 --profile sharma --region ap-south-1 --query StackResources[*].LogicalResourceId
[
    "MyIAMRole",
    "MyInstance",
    "MyInstanceProfile",
    "WaitHandle",
    "mysg",
    "waitcondition"
]
kunal@kunal-Lenovo-U410:~/cloudFormation/chapter1$ aws cloudformation describe-stack-resources --stack-name myfirststack1 --profile sharma --region ap-south-1 --query StackResources[*].PhysicalResourceId
[
    "MyEC2Role",
    "i-048a****38",
    "MyEC2InstanceProfile",
    "https://cloudformation-waitcondition-ap-south-1.s3.ap-south-1.amazonaws.com/**************************A2*************%3Astack/myfirststack1/******************************************************************************
    "mysg2",
    "arn:aws:cloudformation:ap-south-1:************:stack/myfirststack1/88*********************5eaf/***************************/WaitHandle"
]
kunal@kunal-Lenovo-U410:~/cloudFormation/chapter1$ 


#################################################
Use CreationPolicy when you need to ensure that a specific resource, like an EC2 instance, is fully initialized and configured before CloudFormation moves to the next step.
Use WaitCondition when you need to wait for a condition or an event from external resources (which could include multiple resources) before proceeding with the stack creation.
###################################################
Creationpolicy is an attribute whereas WaitCondition is a resource
